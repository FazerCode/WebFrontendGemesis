{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Despot\\\\OneDrive\\\\Dokumente\\\\NFTProj\\\\WebFrontendGemstones\\\\gemstones-frontend\\\\src\\\\utils\\\\interact.js\";\nimport { pinJSONToIPFS } from './pinata.js'; //Holds all wallet and smart contract interaction functions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = 'https://eth-ropsten.alchemyapi.io/v2/h5x3NCmpC9vOdUgVaKNtGvkMWsr4afhq'; //process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json'); //CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED\n\n\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\"; //HERE WE SHOULD ADD OUR CONTRACT ADDRESS\n//Connects the wallet to the site/blockchain\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    };\n  }\n};\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  //if not formated properly return false\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"‚ùóPlease make sure all fields are completed before minting.\"\n    };\n  } //make metadata\n\n\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description; //make pinata call\n\n  const pinataResponse = await pinJSONToIPFS(metadata); //parse for errors\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"üò¢ Something went wrong while uploading your tokenURI.\"\n    };\n  } //this is the metadata of the nft which needs to be stored in ipfs\n\n\n  const tokenURI = pinataResponse.pinataUrl; //Set contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.   //SENDING ETH TO OUT ADDRESS\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"üò• Something went wrong: \" + error.message\n    };\n  }\n}; //Checks if there is already a wallet connected\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Despot/OneDrive/Dokumente/NFTProj/WebFrontendGemstones/gemstones-frontend/src/utils/interact.js"],"names":["pinJSONToIPFS","require","config","alchemyKey","createAlchemyWeb3","web3","contractABI","contractAddress","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","mintNFT","url","name","description","trim","success","metadata","Object","image","pinataResponse","tokenURI","pinataUrl","contract","eth","Contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","txHash","params","error","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import { pinJSONToIPFS } from './pinata.js'\r\n\r\n//Holds all wallet and smart contract interaction functions\r\n\r\nrequire('dotenv').config();\r\nconst alchemyKey = 'https://eth-ropsten.alchemyapi.io/v2/h5x3NCmpC9vOdUgVaKNtGvkMWsr4afhq';//process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json') //CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED\r\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\"; //HERE WE SHOULD ADD OUR CONTRACT ADDRESS\r\n\r\n\r\n//Connects the wallet to the site/blockchain\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"üò• \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        ü¶ä{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const mintNFT = async (url, name, description) => {\r\n    //error handling\r\n    //if not formated properly return false\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n        return {\r\n            success: false,\r\n            status: \"‚ùóPlease make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //make pinata call\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    //parse for errors\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"üò¢ Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    }\r\n    //this is the metadata of the nft which needs to be stored in ipfs\r\n    const tokenURI = pinataResponse.pinataUrl;\r\n\r\n    //Set contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.   //SENDING ETH TO OUT ADDRESS\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract \r\n    };\r\n\r\n    //sign the transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"üò• Something went wrong: \" + error.message\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n//Checks if there is already a wallet connected\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"ü¶ä Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"üò• \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        ü¶ä{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}