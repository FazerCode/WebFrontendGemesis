{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Despot\\\\OneDrive\\\\Dokumente\\\\NFTProj\\\\WebFrontendGemstones\\\\gemstones-frontend\\\\src\\\\utils\\\\interact.js\";\nimport { pinJSONToIPFS } from './pinata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst metadata = require('../resources/metadata/nft-metadata2.json'); //Holds all wallet and smart contract interaction functions\n\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey); // const contractABI = require('./contract-abi.json') //!!CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED!!\n\nconst contractABI = require('./contract-abi2.json'); //!!CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED!!\n// const contractAddress = \"0x6D3bCd6C1E89956BD92bD4b679191abD7798174d\"; //HERE WE SHOULD ADD OUR CONTRACT ADDRESS\n\n\nconst contractAddress = \"0x35B8e7C3036c4A3f38b82C7fdf650a7C6FCCe5d7\"; //TO CONVERT TIMESTAMP INTO TIME AND DATE\n//var dateTimeStamp = web3.eth.getBlock(1920050).timestamp //outputs 1469021581 \n//var d = new Date(dateTimeStamp * 1000) //x1000 to convert from seconds to milliseconds \n//var s = d.toUTCString() \n//s = s.substring(0,s.indexOf(\"GMT\")) + \"UTC\" //change the confusing 'GMT' to 'UTC'\n//Connects the wallet to the site/blockchain\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            rel: \"noreferrer\",\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    };\n  }\n};\nexport const mintNFT = async () => {\n  //error handling\n  //if not formated properly return false\n  // if (url.trim() === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\n  //     return {\n  //         success: false,\n  //         status: \"‚ùóPlease make sure all fields are completed before minting.\",\n  //     }\n  // }\n  //make metadata\n  // const metadata = {};\n  // metadata.name = name;\n  // metadata.image = url;\n  // metadata.description = description;\n  // TODO: metadata should be loaded randomly\n  console.log(metadata); //make pinata call\n\n  const pinataResponse = await pinJSONToIPFS(metadata); //parse for errors\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"üò¢ Something went wrong while uploading your tokenURI.\"\n    };\n  } //this is the metadata of the nft which needs to be stored in ipfs\n\n\n  const tokenURI = pinataResponse.pinataUrl; //Set contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  console.log(window.contract);\n  console.log(window.contract.methods.totalSupply()); //\n\n  var mintUpdateEvent = window.contract.events.MintCooldownUpdated(function (error, result) {\n    if (error) {\n      console.log(error);\n      return;\n    }\n\n    console.log(result);\n    return result;\n  }); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.   //SENDING ETH TO OUT ADDRESS\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    value: parseInt(web3.utils.toWei(\"0.0001\", \"ether\")).toString(16),\n    // set mint price\n    'data': window.contract.methods.mint(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract !! Change id on new mint\n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash + \"\\n\" + \"TimeStamp of mint: \" + mintUpdateEvent.args.timeStamp + \" Minter: \" + mintUpdateEvent.args.minter\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"üò• Something went wrong: \" + error.message\n    };\n  }\n}; //Checks if there is already a wallet connected\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Mint a new NFT here.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            rel: \"noreferrer\",\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Despot/OneDrive/Dokumente/NFTProj/WebFrontendGemstones/gemstones-frontend/src/utils/interact.js"],"names":["pinJSONToIPFS","metadata","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","mintNFT","console","log","pinataResponse","success","tokenURI","pinataUrl","contract","eth","Contract","methods","totalSupply","mintUpdateEvent","events","MintCooldownUpdated","error","result","transactionParameters","to","from","selectedAddress","value","parseInt","utils","toWei","toString","mint","encodeABI","txHash","params","args","timeStamp","minter","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import { pinJSONToIPFS } from './pinata.js'\r\n\r\nconst metadata = require('../resources/metadata/nft-metadata2.json');\r\n//Holds all wallet and smart contract interaction functions\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\n// const contractABI = require('./contract-abi.json') //!!CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED!!\r\nconst contractABI = require('./contract-abi2.json') //!!CHANGE THE CONTRACT ABI ALSO FITTIN FOR OUR CONTRACT IF CHANGE NEEDED!!\r\n// const contractAddress = \"0x6D3bCd6C1E89956BD92bD4b679191abD7798174d\"; //HERE WE SHOULD ADD OUR CONTRACT ADDRESS\r\nconst contractAddress = \"0x35B8e7C3036c4A3f38b82C7fdf650a7C6FCCe5d7\";\r\n\r\n\r\n//TO CONVERT TIMESTAMP INTO TIME AND DATE\r\n//var dateTimeStamp = web3.eth.getBlock(1920050).timestamp //outputs 1469021581 \r\n//var d = new Date(dateTimeStamp * 1000) //x1000 to convert from seconds to milliseconds \r\n//var s = d.toUTCString() \r\n//s = s.substring(0,s.indexOf(\"GMT\")) + \"UTC\" //change the confusing 'GMT' to 'UTC'\r\n\r\n\r\n//Connects the wallet to the site/blockchain\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"üò• \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        ü¶ä{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`} rel=\"noreferrer\">\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const mintNFT = async () => {\r\n    //error handling\r\n    //if not formated properly return false\r\n    // if (url.trim() === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\r\n    //     return {\r\n    //         success: false,\r\n    //         status: \"‚ùóPlease make sure all fields are completed before minting.\",\r\n    //     }\r\n    // }\r\n\r\n    //make metadata\r\n    // const metadata = {};\r\n    // metadata.name = name;\r\n    // metadata.image = url;\r\n    // metadata.description = description;\r\n\r\n    // TODO: metadata should be loaded randomly\r\n    console.log(metadata);\r\n\r\n    //make pinata call\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    //parse for errors\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"üò¢ Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    }\r\n    //this is the metadata of the nft which needs to be stored in ipfs\r\n    const tokenURI = pinataResponse.pinataUrl;\r\n\r\n    //Set contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n    console.log(window.contract);\r\n    console.log(window.contract.methods.totalSupply());\r\n\r\n    //\r\n    var mintUpdateEvent = window.contract.events.MintCooldownUpdated(function(error, result){\r\n        if(error)\r\n        {\r\n            console.log(error);\r\n            return\r\n        }\r\n        console.log(result);\r\n        return result;\r\n    })\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.   //SENDING ETH TO OUT ADDRESS\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        value: parseInt(web3.utils.toWei(\"0.0001\",\"ether\")).toString(16), // set mint price\r\n        'data': window.contract.methods.mint(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract !! Change id on new mint\r\n    };\r\n\r\n    //sign the transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash + \"\\n\"\r\n            + \"TimeStamp of mint: \" + mintUpdateEvent.args.timeStamp + \" Minter: \" + mintUpdateEvent.args.minter\r\n\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"üò• Something went wrong: \" + error.message\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n//Checks if there is already a wallet connected\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"üëÜüèΩ Mint a new NFT here.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"ü¶ä Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"üò• \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        ü¶ä{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`} rel=\"noreferrer\">\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}