{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Despot\\\\OneDrive\\\\Dokumente\\\\NFTProj\\\\WebFrontendGemstones\\\\gemstones-frontend\\\\src\\\\components\\\\Content\\\\Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"../../utils/interact\"; //TODO: MAKE THE NEW HOME?\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = () => {\n  _s();\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\"); //users wallet address\n\n  const [status, setStatus] = useState(\"\"); //User replies with string written to contract\n\n  const [name] = useState(\"\");\n  const [description] = useState(\"\");\n  const [url] = useState(\"\");\n  useEffect(() => {\n    async function connect() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n      addWalletListener();\n    }\n\n    connect();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const {\n      status\n    } = await mintNFT(url, name, description);\n    setStatus(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    id: \"minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83E\\uDD8A Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title\",\n      children: \"\\uD83E\\uDDD9\\u200D\\u2642\\uFE0F Gemesis NFT Minter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onMintPressed,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this); //Updates the UI if User does changes in wallet\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Mint a new NFT here\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          rel: \"noreferrer\",\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this));\n    }\n  }\n};\n\n_s(Minter, \"93pGwuxKdNdYlSGDBSMTfCDlBQY=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["C:/Users/Despot/OneDrive/Dokumente/NFTProj/WebFrontendGemstones/gemstones-frontend/src/components/Content/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","Minter","walletAddress","setWallet","status","setStatus","name","description","url","connect","address","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","length","String","substring","window","ethereum","on","accounts"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT\r\n} from \"../../utils/interact\";\r\n\r\n//TODO: MAKE THE NEW HOME?\r\nconst Minter = () => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");    //users wallet address\r\n  const [status, setStatus] = useState(\"\");  //User replies with string written to contract\r\n  const [name] = useState(\"\");\r\n  const [description] = useState(\"\");\r\n  const [url] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function connect() {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n      addWalletListener();\r\n    }\r\n    connect();    \r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => { \r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\" id=\"minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>🦊 Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Gemesis NFT Minter</h1>\r\n      {/* <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🖼 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form> */}\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n\r\n  //Updates the UI if User does changes in wallet\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Mint a new NFT here\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`} rel=\"noreferrer\">\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n};\r\nexport default Minter;\r\n"]},"metadata":{},"sourceType":"module"}